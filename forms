from django import forms
from django.contrib.auth import authenticate
from django.contrib.auth.models import User
from django.shortcuts import redirect, render
from requests import request
from .models import *

class LoginForm(forms.Form):
    username = forms.CharField(label="Username", widget=forms.TextInput(attrs={'class': 'form-control'}))
    password = forms.CharField(label="Password", widget=forms.PasswordInput(attrs={'class': 'form-control'}))
    role = forms.ChoiceField(
        choices=[('resident', 'Resident'), ('admin', 'Admin')],
        widget=forms.Select(attrs={'class': 'form-control'})
    )

    def clean(self):
        cleaned_data = super().clean()
        username = cleaned_data.get("username")
        password = cleaned_data.get("password")
        role = cleaned_data.get("role")

        if username and password:
            user_auth = authenticate(username=username, password=password)

            if user_auth is None:
                raise forms.ValidationError("Invalid username or password.")

            # Check if the user has a UserTab entry and verify role
            user_tab = UserTab.objects.filter(user=user_auth).first()
            if not user_tab:
                raise forms.ValidationError("User role not found.")
            if user_tab.userrole != role:
                raise forms.ValidationError("Selected role does not match your account role.")

            cleaned_data["user"] = user_auth

    





'''from django import forms
from django.utils.timezone import now
from .models import VisitorsLog

class VisitorForm(forms.ModelForm):
    class Meta:
        model = VisitorsLog
        fields = [
            'visitor_name', 'visitor_email', 'phone_no', 'purpose_of_visit', 
            'group_size', 'visitor_type', 'vehicle_number', 'make_and_model', 
            'ad_approval_status', 'r_approval_status', 'visitor_status', 'entry_time', 'exit_time'
        ]
        widgets = {
            'visitor_name': forms.TextInput(attrs={'class': 'form-control', 'placeholder': 'Enter full name'}),
            'visitor_email': forms.EmailInput(attrs={'class': 'form-control', 'placeholder': 'Enter email'}),
            'phone_no': forms.TextInput(attrs={'class': 'form-control', 'placeholder': 'Enter phone number'}),
            'purpose_of_visit': forms.Textarea(attrs={'class': 'form-control', 'rows': 3, 'placeholder': 'Reason for visit'}),
            'group_size': forms.NumberInput(attrs={'class': 'form-control', 'placeholder': 'Number of visitors'}),
            'visitor_type': forms.TextInput(attrs={'class': 'form-control', 'placeholder': 'Type of visitor'}),
            'vehicle_number': forms.TextInput(attrs={'class': 'form-control', 'placeholder': 'Vehicle plate number'}),
            'make_and_model': forms.TextInput(attrs={'class': 'form-control', 'placeholder': 'Vehicle make and model'}),
            'ad_approval_status': forms.TextInput(attrs={'class': 'form-control', 'placeholder': 'Admin Approval'}),
            'r_approval_status': forms.TextInput(attrs={'class': 'form-control', 'placeholder': 'Resident Approval'}),
            'visitor_status': forms.Select(attrs={'class': 'form-control'}),
            'entry_time': forms.DateTimeInput(attrs={'class': 'form-control', 'type': 'hidden'}),  # Hidden field
            'exit_time': forms.DateTimeInput(attrs={'class': 'form-control', 'type': 'datetime-local'}),
        }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.fields['entry_time'].initial = now()'''  # Set entry time to current time
from django import forms
from django.utils.timezone import now
from .models import VisitorsLog

class VisitorForm(forms.ModelForm):
    class Meta:
        model = VisitorsLog
        fields = [
            'visitor_name', 'visitor_email', 'phone_no', 'purpose_of_visit', 
            'group_size', 'visitor_type', 'vehicle_number', 'make_and_model', 
            'visitor_status', 'exit_time'
        ]  # Removed 'entry_time' so it's auto-set

        widgets = {
            'visitor_name': forms.TextInput(attrs={'class': 'form-control', 'placeholder': 'Enter full name'}),
            'visitor_email': forms.EmailInput(attrs={'class': 'form-control', 'placeholder': 'Enter email'}),
            'phone_no': forms.TextInput(attrs={'class': 'form-control', 'placeholder': 'Enter phone number'}),
            'purpose_of_visit': forms.Textarea(attrs={'class': 'form-control', 'rows': 3, 'placeholder': 'Reason for visit'}),
            'group_size': forms.NumberInput(attrs={'class': 'form-control', 'placeholder': 'Number of visitors'}),
            'visitor_type': forms.TextInput(attrs={'class': 'form-control', 'placeholder': 'Type of visitor'}),
            'vehicle_number': forms.TextInput(attrs={'class': 'form-control', 'placeholder': 'Vehicle plate number'}),
            'make_and_model': forms.TextInput(attrs={'class': 'form-control', 'placeholder': 'Vehicle make and model'}),
            'visitor_status': forms.Select(attrs={'class': 'form-control'}),
            'exit_time': forms.DateTimeInput(attrs={'class': 'form-control', 'type': 'datetime-local', 'required': False}),  # Optional field
        }

    def save(self, commit=True):
        instance = super().save(commit=False)
        instance.entry_time = now()  # Auto-set entry time
        if commit:
            instance.save()
        return instance



class VehicleForm(forms.ModelForm):
    class Meta:
        model = VehicleTab
        fields = ['vehicle_type', 'vehicle_number', 'make_and_model', 'color']

    def __init__(self, *args, **kwargs):
        self.resident = kwargs.pop('resident', None)  # Get resident from view
        super().__init__(*args, **kwargs)

    def clean(self):
        cleaned_data = super().clean()
        
        # Ensure the resident exists
        if not self.resident:
            raise ValidationError("Resident information is required.")

        return cleaned_data

    def save(self, commit=True):
        vehicle = super().save(commit=False)
        vehicle.resident = self.resident  # Assign vehicle to logged-in resident
        
        if commit:
            vehicle.save()
        return vehicle

from django import forms
from .models import FlatTab

class FlatForm(forms.ModelForm):
    class Meta:
        model = FlatTab
        fields = ['block_name', 'wing_name', 'floor', 'flat_number', 'size', 'occupied']
        widgets = {
            'block_name': forms.Select(attrs={'class': 'form-control'}),
            'wing_name': forms.Select(attrs={'class': 'form-control'}),
            'floor': forms.NumberInput(attrs={'class': 'form-control', 'placeholder': 'Enter Floor Number'}),
            'flat_number': forms.TextInput(attrs={'class': 'form-control', 'placeholder': 'Enter Flat Number'}),
            'size': forms.Select(attrs={'class': 'form-control'}),
            'occupied': forms.CheckboxInput(attrs={'class': 'form-check-input'}),
        }
from django import forms
from django.contrib.auth.models import User
from django.contrib.auth.hashers import check_password
from .models import UserTab, ResidentTab, FlatTab, IDProof
import re

class ResidentForm(forms.ModelForm):
    # User Details
    first_name = forms.CharField(max_length=30, required=True, label="First Name")
    last_name = forms.CharField(max_length=30, required=True, label="Last Name")
    username = forms.CharField(max_length=150, required=True)
    email = forms.EmailField(required=True)
    password = forms.CharField(widget=forms.PasswordInput, required=True)
    phone_number = forms.CharField(max_length=10, required=True)

    # Resident Details
    no_of_members = forms.IntegerField(min_value=1, required=True, label="Number of Members")
    role = forms.ChoiceField(choices=[('Owner', 'Owner'), ('Tenant', 'Tenant')], required=True)
    profile_picture = forms.ImageField(required=False)
    move_in = forms.DateTimeField(required=False, widget=forms.DateTimeInput(attrs={'type': 'datetime-local'}))
    move_out = forms.DateTimeField(required=False, widget=forms.DateTimeInput(attrs={'type': 'datetime-local'}))
    r_status = forms.ChoiceField(choices=[('active', 'Active'), ('inactive', 'Inactive')], required=True, initial='active')

    # Flat Details
    f_id = forms.ModelChoiceField(
        queryset=FlatTab.objects.filter(occupied=False),  # Only show unoccupied flats
        empty_label="Select a Flat",
        required=True,
        label="Flat"
    )

    # ID Proof Details
    proof_type = forms.ChoiceField(
        choices=[('AADHAAR', 'Aadhaar'), ('PASSPORT', 'Passport'), ('DRIVING_LICENSE', 'Driving License')],
        required=True
    )
    proof_number = forms.CharField(max_length=20, required=True)
    id_proof_file = forms.ImageField(required=False)

    class Meta:
        model = ResidentTab
        fields = [
            'first_name', 'last_name', 'username', 'email', 'password', 'phone_number', 
            'no_of_members', 'role', 'profile_picture', 'move_in', 'move_out', 'r_status', 'f_id', 
            'proof_type', 'proof_number', 'id_proof_file'
        ]

    def clean_password(self):
        """ Check if the entered password already exists in the database. """
        password = self.cleaned_data.get('password')

        # Loop through all users and check if any have the same password
        for user in User.objects.all():
            if check_password(password, user.password):  # Compare hashed password
                raise forms.ValidationError("This password is already in use. Please choose another one.")

        return password

    def save(self, commit=True):
        password = self.cleaned_data['password']

        # Create User
        user = User.objects.create_user(
            username=self.cleaned_data['username'],
            email=self.cleaned_data['email'],
            password=password  # Django automatically hashes this
        )
        user.first_name = self.cleaned_data['first_name']
        user.last_name = self.cleaned_data['last_name']
        user.save()

        # Create UserTab
        user_tab = UserTab.objects.create(user=user, userrole='resident', phone_number=self.cleaned_data['phone_number'])

        # Create ResidentTab
        resident = ResidentTab(
            u_id=user,
            no_of_members=self.cleaned_data['no_of_members'],
            role=self.cleaned_data['role'],
            move_in=self.cleaned_data['move_in'],
            move_out=self.cleaned_data['move_out'],
            r_status=self.cleaned_data['r_status'],
            f_id=self.cleaned_data['f_id']
        )

        # Assign profile picture (since it's a file)
        if self.files.get('profile_picture'):
            resident.profile_picture = self.files.get('profile_picture')

        # Save resident
        resident.save()

        # Check if proof_number already exists
        proof_number = self.cleaned_data['proof_number']
        if IDProof.objects.filter(proof_number=proof_number).exists():
            raise forms.ValidationError("This ID proof number is already registered. Please use a different one.")

        # Create IDProof
        id_proof = IDProof(
            resident=resident,
            proof_type=self.cleaned_data['proof_type'],
            proof_number=self.cleaned_data['proof_number']
        )

        # Assign ID proof file
        if self.files.get('id_proof_file'):
            id_proof.id_proof_file = self.files.get('id_proof_file')

        # Save ID proof
        id_proof.save()

        # Mark the flat as occupied
        flat = self.cleaned_data['f_id']
        flat.occupied = True
        flat.save()

        return resident


